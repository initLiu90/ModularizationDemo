package com.lzp.apt;

import com.google.auto.service.AutoService;
import com.lzp.annotation.ModuleService;
import com.squareup.javapoet.ClassName;
import com.squareup.javapoet.CodeBlock;
import com.squareup.javapoet.JavaFile;
import com.squareup.javapoet.MethodSpec;
import com.squareup.javapoet.TypeSpec;

import java.io.File;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import javax.annotation.processing.AbstractProcessor;
import javax.annotation.processing.Filer;
import javax.annotation.processing.Messager;
import javax.annotation.processing.ProcessingEnvironment;
import javax.annotation.processing.Processor;
import javax.annotation.processing.RoundEnvironment;
import javax.annotation.processing.SupportedOptions;
import javax.lang.model.element.Element;
import javax.lang.model.element.Modifier;
import javax.lang.model.element.TypeElement;
import javax.lang.model.util.Elements;
import javax.tools.Diagnostic;

@AutoService(Processor.class)
@SupportedOptions("moduleName")
public class ModuleServiceProcessor extends AbstractProcessor {
    Messager mMessager;
    Filer mFiler;
    String mModuleName;
    Elements mElementUtils;

    @Override
    public synchronized void init(ProcessingEnvironment processingEnvironment) {
        super.init(processingEnvironment);
        mMessager = processingEnvironment.getMessager();
        mFiler = processingEnvironment.getFiler();
        mModuleName = getModelName();
        mElementUtils = processingEnvironment.getElementUtils();
    }

    @Override
    public Set<String> getSupportedAnnotationTypes() {
        Set<String> types = new LinkedHashSet<>();
        types.add(ModuleService.class.getCanonicalName());
        return types;
    }

    @Override
    public boolean process(Set<? extends TypeElement> set, RoundEnvironment roundEnvironment) {
        int size = roundEnvironment.getElementsAnnotatedWith(ModuleService.class).size();
        mMessager.printMessage(Diagnostic.Kind.NOTE, "+++++++++++++++++++++++service size=" + size);
        if (size <= 0) return false;

        Map<String, String> services = new HashMap<>();

        try {
            Set<? extends Element> elements = roundEnvironment.getElementsAnnotatedWith(ModuleService.class);
            for (Element element : elements) {
                TypeElement typeElement = (TypeElement) element;
                ModuleService moduleService = typeElement.getAnnotation(ModuleService.class);
                String implClassName = typeElement.getQualifiedName().toString();
                String interfaceName = typeElement.getInterfaces().get(0).toString();
                services.put(interfaceName, implClassName);
            }
        } catch (Exception e) {
            e.printStackTrace();
            mMessager.printMessage(Diagnostic.Kind.NOTE, "+++++++++++++++++++++++ process anotation error");
        }

        generateJavaFile(services);

        return true;
    }

    private void generateJavaFile(Map<String, String> services) {
        String packageName = "com.lzp.core";
        String className = "ModuleServiceManagerHelper$$" + mModuleName;
        String WARNING_TIPS = "DO NOT EDIT THIS FILE!!! IT WAS GENERATED BY AROUTER.";


        CodeBlock.Builder codeBuilder = CodeBlock.builder();
        codeBuilder.beginControlFlow("try");
        for (Map.Entry<String, String> entry : services.entrySet()) {
            codeBuilder.addStatement("$T.serviceMap.put(Class.forName($S),Class.forName($S))", ClassName
                    .get("com.lzp.core", "ModuleServiceManager"), entry
                    .getKey(), entry.getValue());
        }
        codeBuilder.nextControlFlow("catch ($T e)", ClassName.get(Exception.class))
                .endControlFlow();

        TypeSpec moduleHelper = TypeSpec.classBuilder(className)
                .addJavadoc(WARNING_TIPS)
                .addStaticBlock(codeBuilder.build())
                .build();


        try {
            JavaFile.builder(packageName, moduleHelper)
                    .build().writeTo(mFiler);
        } catch (Exception e) {
            e.printStackTrace();
            mMessager.printMessage(Diagnostic.Kind.NOTE, "create java file failed");
        }
    }

    private String getModelName() {
        // Attempt to get user configuration [moduleName]
        String moduleName = null;
        Map<String, String> options = processingEnv.getOptions();
        if (options != null && options.size() > 0) {
            moduleName = options.get("moduleName");
        }
        if (moduleName == null || moduleName.equals("")) {
            moduleName = "default" + System.currentTimeMillis();
        }
        return moduleName;
    }
}
